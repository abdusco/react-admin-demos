[{"C:\\Users\\923044\\AppData\\Local\\Temp\\2020-12-28\\autocompletedemo\\src\\index.tsx":"1","C:\\Users\\923044\\AppData\\Local\\Temp\\2020-12-28\\autocompletedemo\\src\\ReactAdmin.tsx":"2","C:\\Users\\923044\\AppData\\Local\\Temp\\2020-12-28\\autocompletedemo\\src\\useAppListController.ts":"3","C:\\Users\\923044\\AppData\\Local\\Temp\\2020-12-28\\autocompletedemo\\src\\useAppListParams.ts":"4","C:\\Users\\923044\\AppData\\Local\\Temp\\2020-12-28\\autocompletedemo\\src\\AppList.tsx":"5","C:\\Users\\923044\\AppData\\Local\\Temp\\2020-12-28\\autocompletedemo\\src\\dataprovider.ts":"6"},{"size":163,"mtime":1609153555457,"results":"7","hashOfConfig":"8"},{"size":5413,"mtime":1609431762258,"results":"9","hashOfConfig":"8"},{"size":8815,"mtime":1609416624970,"results":"10","hashOfConfig":"8"},{"size":9782,"mtime":1609411889031,"results":"11","hashOfConfig":"8"},{"size":587,"mtime":1609426999754,"results":"12","hashOfConfig":"8"},{"size":160,"mtime":1609416613235,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"6s6i7l",{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\923044\\AppData\\Local\\Temp\\2020-12-28\\autocompletedemo\\src\\index.tsx",[],["28","29"],"C:\\Users\\923044\\AppData\\Local\\Temp\\2020-12-28\\autocompletedemo\\src\\ReactAdmin.tsx",["30","31","32","33"],"C:\\Users\\923044\\AppData\\Local\\Temp\\2020-12-28\\autocompletedemo\\src\\useAppListController.ts",["34"],"C:\\Users\\923044\\AppData\\Local\\Temp\\2020-12-28\\autocompletedemo\\src\\useAppListParams.ts",["35","36","37","38","39","40","41"],"import { useCallback, useMemo, useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\r\nimport { parse, stringify } from 'query-string';\r\nimport lodashDebounce from 'lodash/debounce';\r\nimport set from 'lodash/set';\r\nimport pickBy from 'lodash/pickBy';\r\n\r\nimport queryReducer, {\r\n    SET_FILTER,\r\n    SET_PAGE,\r\n    SET_PER_PAGE,\r\n    SET_SORT,\r\n    SORT_ASC,\r\n} from 'ra-core/lib/reducer/admin/resource/list/queryReducer';\r\nimport { changeListParams, ListParams } from 'ra-core/lib/actions/listActions';\r\nimport { SortPayload, ReduxState, FilterPayload } from 'ra-core/lib/types';\r\nimport removeEmpty from 'ra-core/lib/util/removeEmpty';\r\nimport removeKey from 'ra-core/lib/util/removeKey';\r\n\r\n\r\n\r\ninterface ListParamsOptions {\r\n    resource: string;\r\n    perPage?: number;\r\n    sort?: SortPayload;\r\n    // default value for a filter when displayed but not yet set\r\n    filterDefaultValues?: FilterPayload;\r\n    // permanent filter which always overrides the user entry\r\n    filter?: FilterPayload;\r\n    debounce?: number;\r\n}\r\n\r\ninterface Parameters extends ListParams {\r\n    filterValues: object;\r\n    displayedFilters: {\r\n        [key: string]: boolean;\r\n    };\r\n    requestSignature: any[];\r\n}\r\n\r\ninterface Modifiers {\r\n    changeParams: (action: any) => void;\r\n    setPage: (page: number) => void;\r\n    setPerPage: (pageSize: number) => void;\r\n    setSort: (sort: string, order?: string) => void;\r\n    setFilters: (filters: any, displayedFilters: any) => void;\r\n    hideFilter: (filterName: string) => void;\r\n    showFilter: (filterName: string, defaultValue: any) => void;\r\n}\r\n\r\nconst emptyObject = {};\r\n\r\nconst defaultSort = {\r\n    field: 'id',\r\n    order: SORT_ASC,\r\n};\r\n\r\nconst defaultParams = {};\r\n\r\n/**\r\n * Get the list parameters (page, sort, filters) and modifiers.\r\n *\r\n * These parameters are merged from 3 sources:\r\n *   - the query string from the URL\r\n *   - the params stored in the state (from previous navigation)\r\n *   - the options passed to the hook (including the filter defaultValues)\r\n *\r\n * @returns {Array} A tuple [parameters, modifiers].\r\n * Destructure as [\r\n *    { page, perPage, sort, order, filter, filterValues, displayedFilters, requestSignature },\r\n *    { setFilters, hideFilter, showFilter, setPage, setPerPage, setSort }\r\n * ]\r\n *\r\n * @example\r\n *\r\n * const [listParams, listParamsActions] = useAppListParams({\r\n *      resource: 'posts',\r\n *      filterDefaultValues: {\r\n *          published: true\r\n *      },\r\n *      sort: {\r\n *          field: 'published_at',\r\n *          order: 'DESC'\r\n *      },\r\n *      perPage: 25\r\n * });\r\n *\r\n * const {\r\n *      page,\r\n *      perPage,\r\n *      sort,\r\n *      order,\r\n *      filter,\r\n *      filterValues,\r\n *      displayedFilters,\r\n *      requestSignature\r\n * } = listParams;\r\n *\r\n * const {\r\n *      setFilters,\r\n *      hideFilter,\r\n *      showFilter,\r\n *      setPage,\r\n *      setPerPage,\r\n *      setSort,\r\n * } = listParamsActions;\r\n */\r\nconst useAppListParams = ({\r\n    resource,\r\n    filterDefaultValues,\r\n    filter, // permanent filter\r\n    sort = defaultSort,\r\n    perPage = 10,\r\n    debounce = 500,\r\n}: ListParamsOptions): [Parameters, Modifiers] => {\r\n    const [params, setParams] = useState(defaultParams);\r\n\r\n    const requestSignature = [\r\n        resource,\r\n        params,\r\n        filterDefaultValues,\r\n        JSON.stringify(sort),\r\n        perPage,\r\n    ];\r\n\r\n    const query = useMemo(\r\n        () =>\r\n            getQuery({\r\n                params,\r\n                filterDefaultValues,\r\n                sort,\r\n                perPage,\r\n            }),\r\n        requestSignature // eslint-disable-line react-hooks/exhaustive-deps\r\n    );\r\n\r\n    const changeParams = useCallback(action => {\r\n        const newParams = queryReducer(query, action);\r\n        setParams(newParams);\r\n    }, requestSignature); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const setSort = useCallback(\r\n        (sort: string, order?: string) =>\r\n            changeParams({\r\n                type: SET_SORT,\r\n                payload: { sort, order },\r\n            }),\r\n        requestSignature // eslint-disable-line react-hooks/exhaustive-deps\r\n    );\r\n\r\n    const setPage = useCallback(\r\n        (newPage: number) => changeParams({ type: SET_PAGE, payload: newPage }),\r\n        requestSignature // eslint-disable-line react-hooks/exhaustive-deps\r\n    );\r\n\r\n    const setPerPage = useCallback(\r\n        (newPerPage: number) =>\r\n            changeParams({ type: SET_PER_PAGE, payload: newPerPage }),\r\n        requestSignature // eslint-disable-line react-hooks/exhaustive-deps\r\n    );\r\n\r\n    const filterValues = useMemo(\r\n        () => ({ ...(query.filter || emptyObject), ...filter }),\r\n        [filter, query.filter]\r\n    );\r\n    const displayedFilterValues = query.displayedFilters || emptyObject;\r\n\r\n    const debouncedSetFilters = lodashDebounce(\r\n        (newFilters, newDisplayedFilters) => {\r\n            let payload = {\r\n                filter: removeEmpty(newFilters),\r\n                displayedFilters: undefined,\r\n            };\r\n            if (newDisplayedFilters) {\r\n                // @ts-ignore\r\n                payload.displayedFilters = Object.keys(\r\n                    newDisplayedFilters\r\n                ).reduce((filters, filter) => {\r\n                    return newDisplayedFilters[filter]\r\n                        ? { ...filters, [filter]: true }\r\n                        : filters;\r\n                }, {});\r\n            }\r\n            changeParams({\r\n                type: SET_FILTER,\r\n                payload,\r\n            });\r\n        },\r\n        debounce\r\n    );\r\n\r\n    const setFilters = useCallback(\r\n        (filters, displayedFilters) =>\r\n            debouncedSetFilters(filters, displayedFilters),\r\n        requestSignature // eslint-disable-line react-hooks/exhaustive-deps\r\n    );\r\n\r\n    const hideFilter = useCallback((filterName: string) => {\r\n        const newFilters = removeKey(filterValues, filterName);\r\n        const newDisplayedFilters = {\r\n            ...displayedFilterValues,\r\n            [filterName]: undefined,\r\n        };\r\n\r\n        setFilters(newFilters, newDisplayedFilters);\r\n    }, requestSignature); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const showFilter = useCallback((filterName: string, defaultValue: any) => {\r\n        const newFilters = set(filterValues, filterName, defaultValue);\r\n        const newDisplayedFilters = {\r\n            ...displayedFilterValues,\r\n            [filterName]: true,\r\n        };\r\n        setFilters(newFilters, newDisplayedFilters);\r\n    }, requestSignature); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return [\r\n        {\r\n            // @ts-ignore\r\n            displayedFilters: displayedFilterValues,\r\n            filterValues,\r\n            requestSignature,\r\n            ...query,\r\n        },\r\n        {\r\n            changeParams,\r\n            setPage,\r\n            setPerPage,\r\n            setSort,\r\n            setFilters,\r\n            hideFilter,\r\n            showFilter,\r\n        },\r\n    ];\r\n};\r\n\r\nexport const validQueryParams = [\r\n    'page',\r\n    'perPage',\r\n    'sort',\r\n    'order',\r\n    'filter',\r\n    'displayedFilters',\r\n];\r\n\r\nconst parseObject = (query, field) => {\r\n    if (query[field] && typeof query[field] === 'string') {\r\n        try {\r\n            query[field] = JSON.parse(query[field]);\r\n        } catch (err) {\r\n            delete query[field];\r\n        }\r\n    }\r\n};\r\n\r\nexport const parseQueryFromLocation = ({ search }): Partial<ListParams> => {\r\n    const query = pickBy(\r\n        parse(search),\r\n        (v, k) => validQueryParams.indexOf(k) !== -1\r\n    );\r\n    parseObject(query, 'filter');\r\n    parseObject(query, 'displayedFilters');\r\n    return query;\r\n};\r\n\r\n/**\r\n * Check if user has already set custom sort, page, or filters for this list\r\n *\r\n * User params come from the Redux store as the params props. By default,\r\n * this object is:\r\n *\r\n * { filter: {}, order: null, page: 1, perPage: null, sort: null }\r\n *\r\n * To check if the user has custom params, we must compare the params\r\n * to these initial values.\r\n *\r\n * @param {Object} params\r\n */\r\nexport const hasCustomParams = (params: ListParams) => {\r\n    return (\r\n        params &&\r\n        params.filter &&\r\n        (Object.keys(params.filter).length > 0 ||\r\n            params.order != null ||\r\n            params.page !== 1 ||\r\n            params.perPage != null ||\r\n            params.sort != null)\r\n    );\r\n};\r\n\r\n/**\r\n * Merge list params from 3 different sources:\r\n *   - the query string\r\n *   - the params stored in the state (from previous navigation)\r\n *   - the props passed to the List component (including the filter defaultValues)\r\n */\r\nexport const getQuery = ({\r\n    params,\r\n    filterDefaultValues,\r\n    sort,\r\n    perPage,\r\n}) => {\r\n    const query: Partial<ListParams> =\r\n        hasCustomParams(params)\r\n            ? { ...params }\r\n            : { filter: filterDefaultValues || {} };\r\n\r\n    if (!query.sort) {\r\n        query.sort = sort.field;\r\n        query.order = sort.order;\r\n    }\r\n    if (query.perPage == null) {\r\n        query.perPage = perPage;\r\n    }\r\n    if (query.page == null) {\r\n        query.page = 1;\r\n    }\r\n\r\n    return {\r\n        ...query,\r\n        page: getNumberOrDefault(query.page, 1),\r\n        perPage: getNumberOrDefault(query.perPage, 10),\r\n    } as ListParams;\r\n};\r\n\r\nexport const getNumberOrDefault = (\r\n    possibleNumber: string | number | undefined,\r\n    defaultValue: number\r\n) => {\r\n    const parsedNumber =\r\n        typeof possibleNumber === 'string'\r\n            ? parseInt(possibleNumber, 10)\r\n            : possibleNumber;\r\n\r\n    // @ts-ignore\r\n    return isNaN(parsedNumber) ? defaultValue : parsedNumber;\r\n};\r\n\r\nexport default useAppListParams;\r\n","C:\\Users\\923044\\AppData\\Local\\Temp\\2020-12-28\\autocompletedemo\\src\\AppList.tsx",[],"C:\\Users\\923044\\AppData\\Local\\Temp\\2020-12-28\\autocompletedemo\\src\\dataprovider.ts",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":36,"column":7,"nodeType":"48","messageId":"49","endLine":36,"endColumn":28},{"ruleId":"46","severity":1,"message":"50","line":42,"column":20,"nodeType":"48","messageId":"49","endLine":42,"endColumn":25},{"ruleId":"51","severity":1,"message":"52","line":67,"column":19,"nodeType":"53","messageId":"54","endLine":67,"endColumn":21},{"ruleId":"51","severity":1,"message":"52","line":67,"column":44,"nodeType":"53","messageId":"54","endLine":67,"endColumn":46},{"ruleId":"46","severity":1,"message":"55","line":137,"column":54,"nodeType":"48","messageId":"49","endLine":137,"endColumn":59},{"ruleId":"46","severity":1,"message":"56","line":1,"column":32,"nodeType":"48","messageId":"49","endLine":1,"endColumn":41},{"ruleId":"46","severity":1,"message":"57","line":2,"column":10,"nodeType":"48","messageId":"49","endLine":2,"endColumn":21},{"ruleId":"46","severity":1,"message":"58","line":2,"column":23,"nodeType":"48","messageId":"49","endLine":2,"endColumn":34},{"ruleId":"46","severity":1,"message":"59","line":2,"column":36,"nodeType":"48","messageId":"49","endLine":2,"endColumn":48},{"ruleId":"46","severity":1,"message":"60","line":3,"column":17,"nodeType":"48","messageId":"49","endLine":3,"endColumn":26},{"ruleId":"46","severity":1,"message":"61","line":15,"column":10,"nodeType":"48","messageId":"49","endLine":15,"endColumn":26},{"ruleId":"46","severity":1,"message":"62","line":16,"column":23,"nodeType":"48","messageId":"49","endLine":16,"endColumn":33},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"@typescript-eslint/no-unused-vars","'DependentAutocomplete' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'_data' is assigned a value but never used.","'useEffect' is defined but never used.","'useSelector' is defined but never used.","'useDispatch' is defined but never used.","'shallowEqual' is defined but never used.","'stringify' is defined but never used.","'changeListParams' is defined but never used.","'ReduxState' is defined but never used.","no-global-assign","no-unsafe-negation"]